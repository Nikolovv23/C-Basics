// Write a program that checks all possible combinations of a pair of numbers in the interval of two given numbers. 
// The output is printed, which is the combination whose sum of numbers is equal to a given magic number.
// If there is no combination that matches the condition, a message is printed that it was not found.

// Input
// The input is readable from the console and consists of three lines:
// ⦁ First line - beginning of the interval - integer in the interval [1 ... 999]
// ⦁ Second line - end of the interval - integer in the interval [greater than the first number ... 1000]
// ⦁ Third row - the magic number - an integer in the interval [1 ... 10000]

// Output
// One line should be printed on the console, according to the result:
// ⦁ If a combination is found whose sum of numbers is equal to the magic number
// ⦁ "Combination N: {sequence number} ({first number} + {second number} = {magic number})"
// ⦁ If no matching condition is found
//  "{Number of all combinations} combinations - neither equals {magic number}"

using system;
namespace SumOfTwoNumbers
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int start = int.Parse(Console.ReadLine());
            int end = int.Parse(Console.ReadLine());
            int magicNumber = int.Parse(Console.ReadLine());
            bool isMagicNumberFound = false;
            int combinations = 0;

            for (int x1 = start; x1 <= end; x1++)
            {
                for (int x2 = start; x2 <= end; x2++)
                {
                    combinations++;
                    if (x1 + x2 == magicNumber)
                    {
                        isMagicNumberFound = true;
                        Console.WriteLine($"Combination N:{combinations} ({x1} + {x2} = {magicNumber})");
                        return;
                    }
                }
            }

            if (!isMagicNumberFound)
            {
                Console.WriteLine($"{combinations} combinations - neither equals {magicNumber}");
            }
        }
    }
}
